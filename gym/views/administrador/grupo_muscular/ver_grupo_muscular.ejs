<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Tailwind CSS -->
    <link
      rel="shortcut icon"
      href="https://raw.githubusercontent.com/JeanCardozo/audios/main/z.png"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.16/tailwind.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="../../../src/output.css" />
    <link
      href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
      .btn-confirmar {
        background-color: green;
        color: white;
      }
      .btn-confirmar:hover {
        background-color: #22c55e;
      }

      .btn-cancelar {
        background-color: red;
        color: white;
      }
      .btn-cancelar:hover {
        background-color: #c53222c4;
      }
    </style>
    <title>Ver grupos musculares</title>
  </head>
  <body class="bg-fondo">
    <%- include('../plantillas/navbar.ejs') %>

    <div class="px-10 mx-auto mt-4 p-5">
      <div class="flex justify-start gap-2 mb-4">
        <a
          href="#"
          class="btn mt-4 inline-flex items-center border-green-400 bg-green-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-green-700"
          id="crearGrupoBtn"
        >
          <i class="bx bx-plus-circle mr-2 br-md"></i>Crear Grupo muscular
        </a>
        <a
          href="/index_admin"
          class="btn mt-4 inline-flex items-center border border-red-400 bg-red-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-red-700"
        >
          Volver
        </a>
      </div>
    </div>

    <div class="max-w-7xl mx-auto p-4">
      <div class="overflow-x-auto">
        <table
          class="min-w-full table-auto text-xs sm:text-sm lg:text-base text-left text-gray-500 dark:text-gray-400"
        >
          <thead class="bg-gray-500 text-white text-center">
            <tr>
              <th
                scope="col"
                class="px-4 py-6 text-xs font-medium uppercase tracking-wider"
              >
                ID
              </th>
              <th
                scope="col"
                class="px-4 py-6 text-xs font-medium uppercase tracking-wider"
              >
                GRUPO MUSCULAR
              </th>
              <th
                scope="col"
                class="px-4 py-6 text-xs font-medium uppercase tracking-wider"
              >
                SECCION
              </th>
              <th
                scope="col"
                class="px-4 py-6 text-xs font-medium uppercase tracking-wider"
              >
                ACCIONES
              </th>
            </tr>
          </thead>
          <tbody
            class="bg-white divide-y divide-gray-200 text-center"
            id="tableBody"
          >
            <!-- Los datos se llenarán aquí dinámicamente -->
          </tbody>
        </table>
        <div id="pagination" class="w-full flex justify-center mt-4"></div>
      </div>
    </div>

    <script defer>
      const divPagination = document.getElementById("pagination");
      const searchInput = document.getElementById("searchInput");
      let datos = [];
      let filteredData = [];
      const itemsPorPagina = 5;
      let currentPage = 1;

      async function getData() {
        try {
          const response = await fetch("/verGrupoMuscularess", {
            method: "POST",
          });

          if (!response.ok) {
            throw new Error(
              "La solicitud no fue exitosa: " + response.statusText
            );
          }

          return await response.json();
        } catch (error) {
          console.error("Error al obtener datos:", error);
          return [];
        }
      }

      async function inicializar() {
        datos = await getData();
        filteredData = datos;
        actualizarPaginacion();
      }

      function actualizarPaginacion() {
        const totalPages = Math.ceil(filteredData.length / itemsPorPagina);
        generatePagination(totalPages);
        mostrarPagina(currentPage);
      }

      function generatePagination(totalPages) {
        let startPage = Math.max(currentPage - 1, 1);
        let endPage = Math.min(startPage + 2, totalPages);

        if (endPage - startPage < 2) {
          startPage = Math.max(endPage - 2, 1);
        }

        let paginationHTML = "";

        paginationHTML += `
          <button class="mt-4 px-4 py-2 font-bold text-gray-500 bg-white rounded-l hover:bg-gray-100" 
          ${currentPage === 1 ? "disabled" : ""} data-page="${currentPage - 1}">
            Anterior
          </button>
        `;

        for (let i = startPage; i <= endPage; i++) {
          paginationHTML += `
            <button class="mt-4 px-4 py-2 font-bold ${
              i === currentPage
                ? "text-blue-500 bg-blue-100"
                : "text-gray-700 bg-white"
            } hover:bg-gray-100 ${
            i === currentPage ? "active" : ""
          }" data-page="${i}">${i}</button>
          `;
        }

        paginationHTML += `
          <button class="mt-4 px-4 py-2 font-bold text-gray-500 bg-white rounded-r hover:bg-gray-100" 
          ${currentPage === totalPages ? "disabled" : ""} data-page="${
          currentPage + 1
        }">
            Siguiente
          </button>
        `;

        divPagination.innerHTML = paginationHTML;

        divPagination.querySelectorAll("button").forEach((button) => {
          button.addEventListener("click", (e) => {
            if (!e.target.disabled) {
              currentPage = parseInt(e.target.dataset.page);
              actualizarPaginacion();
            }
          });
        });
      }

      function mostrarPagina(numeroPagina) {
        const inicio = (numeroPagina - 1) * itemsPorPagina;
        const fin = inicio + itemsPorPagina;
        const datosParaMostrar = filteredData.slice(inicio, fin);

        const tbody = document.getElementById("tableBody");
        tbody.innerHTML = datosParaMostrar
          .map(
            (dato, index) => `
            <tr class="py-0 text-xm max-w-sm text-center hover:bg-gray-100 ${
              index % 2 === 0 ? "bg-gray-100" : ""
            }">
              <td class="p-2">${dato.id}</td>
              <td class="p-2">${dato.nombre}</td>
              <td class="p-2">${dato.seccion}</td>
              <td class="p-2">
                <a
                  href="#"
                  class="inline-block bg-blue-500 hover:bg-blue-700 text-white font-bold text-sm py-1 px-2 rounded whitespace-nowrap updateGrupoBtn"
                  data-id="${dato.id}"
                >
                  Editar
                </a>
              </td>
            </tr>
          `
          )
          .join("");
      }

      function filtrarResultados() {
        const input = searchInput.value.toLowerCase();
        filteredData = datos.filter(
          (dato) =>
            dato.id.toString().toLowerCase().includes(input) ||
            dato.nombre.toLowerCase().includes(input) ||
            dato.seccion.toLowerCase().includes(input)
        );
        currentPage = 1;
        actualizarPaginacion();
      }

      searchInput.addEventListener("input", filtrarResultados);

      inicializar();
    </script>

    <script>
      document
        .getElementById("crearGrupoBtn")
        .addEventListener("click", function (e) {
          e.preventDefault();
          Swal.fire({
            title: "Crear grupo muscular",
            html: `
            <form id="grupoForm" action="/crear_gm" method="post" class="space-y-4">
             <div>
                <label for="seccion" class="block text-sm font-medium text-gray-700">Sección del cuerpo</label>
                <select id="seccion" name="seccion" class="mt-1 block w-full rounded-md border border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" required>
                  <option value="" disabled selected>Seleccione una sección</option>
                  <option value="Tren Superior">Tren Superior</option>
                  <option value="Tren Inferior">Tren Inferior</option>
                </select>
              </div>

              <div>
                <label for="musculo" class="block text-sm font-medium text-gray-700">Grupo muscular</label>
                <input type="text" class="mt-1 block w-full rounded-md border border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" id="musculo" name="musculo" required>
              </div>
            </form>
          `,
            confirmButtonClass: "btn-confirmar",
            cancelButtonClass: "btn-cancelar",
            customClass: {
              confirmButton: "btn-confirmar",
              cancelButton: "btn-cancelar",
            },
            showCancelButton: true,
            confirmButtonText: "Guardar",
            cancelButtonText: "Cancelar",
            preConfirm: () => {
              const seccionInput = document.getElementById("seccion");
              const musculoInput = document.getElementById("musculo");

              if (!seccionInput.value) {
                Swal.showValidationMessage(
                  "Por favor, ingrese una seccion del cuerpo"
                );
                return false;
              } else {
                if (!musculoInput.value) {
                  Swal.showValidationMessage(
                    "Por favor, ingrese el grupo muscular"
                  );
                  return false;
                } else {
                  document.getElementById("grupoForm").requestSubmit();
                  const form = Swal.getPopup().querySelector("#grupoForm");
                  form.requestSubmit();
                }
              }
            },
          }).catch((error) =>
            console.error("Error al obtener los convenios:", error)
          );
        });

      document.querySelector("tbody").addEventListener("click", function (e) {
        if (e.target.classList.contains("updateGrupoBtn")) {
          e.preventDefault();
          const grupoId = e.target.dataset.id;

          fetch(`/actualizar_g/${grupoId}`)
            .then((response) => response.json())
            .then((data) => {
              Swal.fire({
                title: "Actualizar grupo muscular",
                html: `
                <form id="updateForm" action="/update_gm" method="post" class="space-y-4">
                  <div>
                    <label for="id" class="block text-sm font-medium text-gray-700">ID</label>
                    <input type="text" class="mt-1 block w-full rounded-md border border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" id="id" name="id" readonly value="${
                      data.id
                    }" required>
                  </div>
                  <div>
                    <label for="seccion" class="block text-sm font-medium text-gray-700">Sección del cuerpo</label>
                    <select id="seccion" name="seccion" class="mt-1 block w-full rounded-md border border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" required>
                    <option disabled selected>Seleccione una sección</option>
                  
                      <option value="Tren Superior" ${
                        data.seccion === "Tren Superior" ? "selected" : ""
                      }>Tren Superior</option>
                      <option value="Tren Inferior" ${
                        data.seccion === "Tren Inferior" ? "selected" : ""
                      }>Tren Inferior</option>
                    </select>
                  </div>
                  <div>
                    <label for="musculo" class="block text-sm font-medium text-gray-700">Grupo muscular</label>
                    <input type="text" class="mt-1 block w-full rounded-md border border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" id="musculo" name="musculo" value="${
                      data.nombre
                    }" required>
                  </div>
                </form>
              `,
                confirmButtonClass: "btn-confirmar",
                cancelButtonClass: "btn-cancelar",
                customClass: {
                  confirmButton: "btn-confirmar",
                  cancelButton: "btn-cancelar",
                },
                showCancelButton: true,
                confirmButtonText: "Actualizar",
                cancelButtonText: "Cancelar",
                preConfirm: () => {
                  const idInput = document.getElementById("id");
                  const seccionInput = document.getElementById("seccion");
                  const musculoInput = document.getElementById("musculo");

                  if (!idInput.value) {
                    Swal.showValidationMessage(
                      "Por favor, ingrese un id del grupo muscular"
                    );
                    return false;
                  } else {
                    if (!seccionInput.value) {
                      Swal.showValidationMessage(
                        "Por favor, ingrese una seccino del cuerpo"
                      );
                      return false;
                    } else {
                      if (!musculoInput.value) {
                        Swal.showValidationMessage(
                          "Por favor, ingrese el grupo muscular"
                        );
                        return false;
                      } else {
                        document.getElementById("updateForm").requestSubmit();
                        const form =
                          Swal.getPopup().querySelector("#updateForm");
                        form.requestSubmit();
                      }
                    }
                  }
                },
              }).catch((error) =>
                console.error("Error al obtener los convenios:", error)
              );
            });
        }
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Verificar si hay un mensaje de alerta en la respuesta
        `<% if (typeof alertMessage !== 'undefined' && alertMessage) { %>`;
        Swal.fire({
          title: "Éxito",
          text: "<%= alertMessage.text %>",
          icon: "<%= alertMessage.type %>",
          showConfirmButton: <%= alertMessage.showConfirmButton %>,
          timer: <%= alertMessage.timer %>,
        }).then(() => {
          // Remover el parámetro de la URL después de mostrar la alerta
          const url = new URL(window.location);
          url.searchParams.delete("message");
          window.history.replaceState({}, "", url);
        });
        `<% } %>`;
      });
    </script>
  </body>
</html>
