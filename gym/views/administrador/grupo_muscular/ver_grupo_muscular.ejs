<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Tailwind CSS -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.16/tailwind.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="../../../src/output.css" />
    <link
      href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
      rel="stylesheet"
    />

    <style>
      .btn-confirmar {
        background-color: green;
        color: white;
      }
      .btn-confirmar:hover {
        background-color: #22C55E; 
      }
  
      .btn-cancelar {
        background-color: red; 
        color: white;
      }
      .btn-cancelar:hover {
        background-color: #c53222c4; 
      }
      </style>
    <title>Ver grupos musculares</title>
  </head>
  <body>
    <%- include('../plantillas/navbar.ejs') %>

    <div  class="px-10 mx-auto mt-4 p-5">
      <div class="flex justify-start gap-2 mb-4">
        <a
        href="#"
        class="btn mt-4 inline-flex items-center border-green-400 bg-green-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-green-700"
        id="crearGrupoBtn">
        
        <i class="bx bx-plus-circle mr-2 br-md"></i>Crear Grupo muscular
        </a
      >
      <a
          href="/index_admin"
          class="btn mt-4 inline-flex items-center border border-red-400 bg-red-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-red-700"
        >
          Volver
        </a>
      </div>
    </div>
      <div class="max-w-7xl mx-auto p-4">
        <div class="overflow-x-auto">
            <table class="min-w-full table-auto text-xs
             sm:text-sm lg:text-base text-left text-gray-500
              dark:text-gray-400">
        <thead class="bg-gray-500 text-white text-center">
          <tr>
            <th
              scope="col"
              class="px-4 py-6  text-xs font-medium uppercase tracking-wider"
            >
              ID
            </th>
            <th
              scope="col"
              class="px-4 py-6  text-xs font-medium uppercase tracking-wider"
            >
              NOMBRE
            </th>
            <th
              scope="col"
              class="px-4 py-6  text-xs font-medium uppercase tracking-wider"
            >
              SECCION
            </th>
            <th
              scope="col"
              class="px-4 py-6  text-xs font-medium uppercase tracking-wider"
            >
              ACCIONES
            </th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200 text-center">
        </tbody>
      </table>
      <div id="pagination" class="w-full flex justify-center"></div>

    </div>

    <script defer>
      const divPagination = document.getElementById('pagination');
      let datos = [];
      const itemsPorPagina = 5;
    
      async function getData() {
        try {
          const response = await fetch('/verGrupoMuscularess', {
            method: 'POST',
          });
    
          if (!response.ok) {
            throw new Error('La solicitud no fue exitosa: ' + response.statusText);
          }
    
          return await response.json();
        } catch (error) {
          console.error('Error al obtener datos:', error);
          return [];
        }
      }
    
      async function inicializar() {
        datos = await getData();
        console.log(datos);
    
        const totalPages = Math.ceil(datos.length / itemsPorPagina);
        generatePagination(totalPages);
        mostrarPagina(1);
      }
    
      function generatePagination(totalPages) {
        divPagination.innerHTML = Array.from({ length: totalPages }, (_, i) => 
          `<button class="border border-gray-300 bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-md px-3 py-1.5 m-1 transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-50 shadow-md" data-page="${i + 1}">${i + 1}</button>
`
        ).join('');
    
        divPagination.addEventListener('click', (e) => {
          if (e.target.tagName === 'BUTTON') {
            mostrarPagina(parseInt(e.target.dataset.page));
          }
        });
      }
    
      function mostrarPagina(numeroPagina) {
        const inicio = (numeroPagina - 1) * itemsPorPagina;
        const fin = inicio + itemsPorPagina;
        const datosParaMostrar = datos.slice(inicio, fin);
    
        const tbody = document.querySelector('tbody');
        tbody.innerHTML = datosParaMostrar.map((dato, index) => `
          <tr class="py-0    text-xm max-w-sm text-center  hover:bg-gray-100 ${index % 2 == 0 && "bg-gray-100"}">
            <td class="p-2">${dato.id}</td>
            <td class="p-2">${dato.nombre}</td>
            <td class="p-2">${dato.seccion}</td>
            <td class="p-2">
                  <a
                 href="#"
                  class="inline-block bg-blue-500 hover:bg-blue-700 text-white font-bold text-sm py-1 px-2 rounded whitespace-nowrap updateGrupoBtn"
                  data-id="${dato.id}"
                >
                  Editar
                </a>

            </td>
          </tr>
        `).join('');
      }
    
      inicializar();
    </script>



    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      const inputSearch = document.getElementById("inputSearch");
      const tableBody = document.getElementById("tableBody");

      function filterTable() {
        const filter = inputSearch.value.toUpperCase();
        const rows = tableBody.getElementsByTagName("tr");

        for (let i = 0; i < rows.length; i++) {
          const cells = rows[i].getElementsByTagName("td");
          let found = false;

          for (let j = 0; j < cells.length; j++) {
            if (cells[j].innerText.toUpperCase().indexOf(filter) > -1) {
              found = true;
              break;
            }
          }

          rows[i].style.display = found ? "" : "none";
        }
      }

      document
        .getElementById("searchButton")
        .addEventListener("click", filterTable);
      inputSearch.addEventListener("keyup", filterTable);
    </script>





<script>
  document
    .getElementById("crearGrupoBtn")
    .addEventListener("click", function (e) {
      e.preventDefault();
      Swal.fire({
        title: "Crear grupo muscular",
        html: `
            <form id="grupoForm" action="/crear_gm" method="post" class="space-y-4">
          <div>
            <label for="id" class="block text-sm font-medium text-gray-700">ID</label>
            <input type="text" class="mt-1 block w-full rounded-md border border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" id="id" name="id" required>
            </div>
            <div>
              <label for="seccion" class="block text-sm font-medium text-gray-700">Sección del cuerpo</label>
                <select id="seccion" name="seccion" class="mt-1 block w-full rounded-md border border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" required>
                <option disabled selected>Seleccione una sección</option>
                <option value="Tren Superior">Tren Superior</option>
                <option value="Tren Inferior">Tren Inferior</option>
              </select>
            </div>
            <div>
              <label for="musculo" class="block text-sm font-medium text-gray-700">Grupo muscular</label>
              <input type="text" class="mt-1 block w-full rounded-md border border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" id="musculo" name="musculo" required>
          </div>
        </form>

      `,
          confirmButtonClass : 'btn-confirmar',
            cancelButtonClass : 'btn-cancelar',
            customClass: {
              confirmButton: 'btn-confirmar',
              cancelButton: 'btn-cancelar'
            },
        showCancelButton: true,
        confirmButtonText: "Guardar",
        cancelButtonText: "Cancelar",
        preConfirm: () => {
          document.getElementById("grupoForm").submit();
        },
      });
    });
</script>
<script>
  // Selecciona todos los botones de actualizar por clase o un atributo común}
    
    document.querySelector("tbody").addEventListener("click", function (e) {
        if (e.target.classList.contains("updateGrupoBtn")) {
          e.preventDefault();
          const grupoId =e.target.dataset.id;  
          // Obtén el ID del grupo muscular a actualizar

    // Realiza la solicitud GET para obtener los datos del grupo muscular
    fetch(`/actualizar_g/${grupoId}`)
      .then(response => response.json())  // Asegúrate de que la respuesta es JSON
      .then(data => {
        console.log("la monda esta:", data);
        if (data.error) {
          Swal.fire("Error", data.error, "error");
        } else {
          Swal.fire({
            title: "Actualizar Grupo muscular",
            html: `
                          <form id="updateRolesForm" action="/update_gm" method="post">
              <input type="hidden" name="id" value="${grupoId}">
              <div class="mb-3">
                <label for="seccion" class="form-label">Sección</label>
                <select name="seccion" id="seccion" class="form-select" required>
                  <option value="" disabled ${!data.seccion ? 'selected' : ''}>Sección del cuerpo</option>
                  <option value="Tren Superior" ${data.seccion === "Tren Superior" ? 'selected' : ''}>Tren Superior</option>
                  <option value="Tren Inferior" ${data.seccion === "Tren Inferior" ? 'selected' : ''}>Tren Inferior</option>
                  
                  
                </select>
              </div>
              <div class="mb-3">
                <label for="musculo" class="form-label">Grupo muscular</label>
                <input type="text" class="form-control" id="musculo" name="musculo" value="${data.nombre}" required>
              </div>
            </form>
            `,
            confirmButtonClass : 'btn-confirmar',
            cancelButtonClass : 'btn-cancelar',
            customClass: {
              confirmButton: 'btn-confirmar',
              cancelButton: 'btn-cancelar'
            },
            showCancelButton: true,
            confirmButtonText: "Guardar",
            cancelButtonText: "Cancelar",
            preConfirm: () => {
              document.getElementById("updateRolesForm").submit();
            },
          });
        }
      })
      .catch(error => {
        console.error("Error:", error);
        Swal.fire("Error", "Ocurrió un error al obtener los datos del grupo muscular", "error");
      });
  }});
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  const Toast = Swal.mixin({
    toast: true,
    position: 'bottom-end', // Mostrar en la esquina inferior derecha
    showConfirmButton: false,
    timer: 2000, // Duración de la alerta en milisegundos (2 segundos)
    timerProgressBar: true,
    didOpen: (toast) => {
      toast.onmouseenter = Swal.stopTimer; // Detener el temporizador al pasar el ratón
      toast.onmouseleave = Swal.resumeTimer; // Reanudar el temporizador al quitar el ratón
    },
  });

  // Verificar si el parámetro create=success está en la URL
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get("create") === "success") {
    Toast.fire({
      icon: 'success',
      title: '¡Éxito! Grupo Muscular creado exitosamente.',
    });
  }

  // Verificar si el parámetro update=success está en la URL
  if (urlParams.get("update") === "success") {
    Toast.fire({
      icon: 'success',
      title: '¡Éxito! Grupo Muscular actualizado exitosamente.',
    });
  }
</script>
  </body>
</html>
