<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Tailwind CSS -->
    <link
      rel="shortcut icon"
      href="https://raw.githubusercontent.com/JeanCardozo/audios/main/z.png"
    />
     <link
     href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.16/tailwind.min.css"
     rel="stylesheet"
   />
   <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
   <link rel="stylesheet" href="../../../src/output.css" />
   <link
     href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
     rel="stylesheet"
   />

    <title>Ver plan de entrenamiento</title>
  </head>
  <body class="bg-fondo"> 
    <%- include('../plantillas/navbar.ejs') %>

    <div class="px-10 mx-auto mt-4 p-5">
      <div class="flex justify-start gap-2 mb-4">
      <a href="/create_plan_ent" class="btn mt-4 inline-flex items-center border-green-400 bg-green-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-green-700"
      >
        
        <i class="bx bx-plus-circle mr-2"></i> Crear Plan de entrenamiento
      </a>
      <a href="/index_admin" 
      class="btn mt-4 inline-flex items-center border border-red-400 bg-red-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-red-700"
      >Volver</a>
    </div>
    <div class="max-w-7xl mx-auto p-4">
      <div class="overflow-x-auto">
          <table class="min-w-full table-auto text-xs
           sm:text-sm lg:text-base text-left text-gray-500
      
            dark:text-gray-400">
        <thead class="bg-gray-500 text-center text-lg">
          <tr class="text-white">
            <th scope="col" class="py-4 px-6">Plan</th>
            <th scope="col" class="py-4 px-6">Identificacion</th>
            <th scope="col" class="py-4 px-6">Nombre</th>
            <th scope="col" class="py-4 px-6">Ver Mas</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
        </tbody>
      </table>
      <div id="pagination" class="w-full flex justify-center"></div>

    </div>

  <script defer>
      const divPagination = document.getElementById('pagination');
      const searchInput = document.getElementById('searchInput');
      let datos = [];
      let filteredData = [];
      const itemsPorPagina = 5;
      let currentPage = 1;
    
      async function getData() {
        try {
          const response = await fetch('/verPlanEnt', {
            method: 'POST',
          });
    
          if (!response.ok) {
            throw new Error('La solicitud no fue exitosa: ' + response.error);
          }
    
          return await response.json();
        } catch (error) {
          console.error('Error al obtener datos:', error);
          return [];
        }
      }
    
      async function inicializar() {
        datos = await getData();
        filteredData = datos;
        actualizarTablaYPaginacion();
      }
    
      function actualizarTablaYPaginacion() {
        const totalPages = Math.ceil(Object.keys(agruparPorCliente(filteredData)).length / itemsPorPagina);
        generatePagination(totalPages);
        mostrarPagina(currentPage);
      }
    
      function generatePagination(totalPages) {
        let startPage = Math.max(currentPage - 1, 1);
        let endPage = Math.min(startPage + 2, totalPages);
    
        if (endPage - startPage < 2) {
          startPage = Math.max(endPage - 2, 1);
        }
    
        let paginationHTML = `
          <button class="mt-4 px-4 py-2 font-bold text-gray-500 bg-white rounded-l hover:bg-gray-100" 
          ${currentPage === 1 ? "disabled" : ""} data-page="${currentPage - 1}">
            Anterior
          </button>
        `;
    
        for (let i = startPage; i <= endPage; i++) {
          paginationHTML += `
            <button class="mt-4 px-4 py-2 font-bold ${
              i === currentPage ? "text-blue-500 bg-blue-100" : "text-gray-700 bg-white"
            } hover:bg-gray-100 ${i === currentPage ? "active" : ""}" data-page="${i}">${i}</button>
          `;
        }
    
        paginationHTML += `
          <button class="mt-4 px-4 py-2 font-bold text-gray-500 bg-white rounded-r hover:bg-gray-100" 
          ${currentPage === totalPages ? "disabled" : ""} data-page="${currentPage + 1}">
            Siguiente
          </button>
        `;
    
        divPagination.innerHTML = paginationHTML;
    
        divPagination.querySelectorAll("button").forEach((button) => {
          button.addEventListener("click", (e) => {
            if (!e.target.disabled) {
              currentPage = parseInt(e.target.dataset.page);
              actualizarTablaYPaginacion();
            }
          });
        });
      }
    
      function agruparPorCliente(data) {
        const clientes = {};
        data.forEach((dato) => {
          if (!clientes[dato.id_cliente]) {
            clientes[dato.id_cliente] = [];
          }
          clientes[dato.id_cliente].push(dato);
        });
        return clientes;
      }
    
      function mostrarPagina(numeroPagina) {
        const inicio = (numeroPagina - 1) * itemsPorPagina;
        const fin = inicio + itemsPorPagina;
        
        const clientes = agruparPorCliente(filteredData);
        const clientesParaMostrar = Object.keys(clientes).slice(inicio, fin);
        
        const tbody = document.querySelector('tbody');
        tbody.innerHTML = clientesParaMostrar.map((id_cliente, index) => {
          const cliente = clientes[id_cliente][0];
          return `
            <tr class="py-0 text-xm max-w-sm text-center hover:bg-gray-100 ${index % 2 == 0 && "bg-gray-100"}">
              <td class="p-3 text-lg">${cliente.id_plan_entrenamiento}</td>
              <td class="p-3 text-lg">${cliente.id_cliente}</td>
              <td class="p-3 text-lg">${cliente.nombreCliente}</td>
              <td>
                <a href="#" class="px-2 py-1 bg-blue-500 text-white rounded-md
                  hover:bg-blue-700 ver-mas"
                  data-client-id="${cliente.id_cliente}">Ver más</a>
              </td>
            </tr>
          `;
        }).join('');
      }
    
      function filtrarResultados() {
        const input = searchInput.value.toLowerCase();
        filteredData = datos.filter(
          (dato) =>
            dato.id_plan_entrenamiento.toString().includes(input) ||
            dato.id_cliente.toString().includes(input) ||
            dato.nombreCliente.toLowerCase().includes(input)
        );
        currentPage = 1;
        actualizarTablaYPaginacion();
      }
    
      searchInput.addEventListener("input", filtrarResultados);
    
      inicializar();
  </script>
    <script>
      document.body.addEventListener("click", function (event) {
        if (event.target.classList.contains("ver-mas")) {
          const clienteId = event.target.dataset.clientId;
      
          fetch(`/info_plan/${clienteId}`)
            .then((response) => {
              if (!response.ok) {
                throw new Error("Error al obtener los datos del plan de entrenamiento");
              }
              return response.json();
            })
            .then((data) => {
              const nombreCliente = data.nombreCliente;
              const planes = data.planesDeEntrenamiento;
      
              let planContent = `
                <table class="min-w-full bg-white mb-4">
                  <thead class="bg-gray-800 text-white text-xl">
                    <tr>
                      <th class="py-2 px-4">Día</th>
                      <th class="py-2 px-4">Músculo</th>
                      <th class="py-2 px-4">Ejercicio</th>
                      <th class="py-2 px-4">Series</th>
                      <th class="py-2 px-4">Repeticiones</th>
                    </tr>
                  </thead>
                  <tbody class="text-gray-700">
              `;
      
              planes.forEach(plan => {
                const dia = plan.dia;
                const musculos = plan.musculo;
                const ejercicios = plan.ejercicio;
                const series = plan.series;
                const repeticiones = plan.repeticiones;
      
                // Calcular cuántas filas habrá para este plan
                const length = Math.max(musculos.length, ejercicios.length, series.length, repeticiones.length);  
                for (let i = 0; i < length; i++) {
                  planContent += `
                    <tr class="text-lg">
                      ${i === 0 ? `<td class="py-2 px-4 border" rowspan="${length}" style="vertical-align: middle;">${dia}</td>` : ''}
                      <td class="py-2 px-4 border">${musculos[i] || ''}</td>
                      <td class="py-2 px-4 border">${ejercicios[i] || ''}</td>
                      <td class="py-2 px-4 border">${series[i] || ''}</td>
                      <td class="py-2 px-4 border">${repeticiones[i] || ''}</td>
                    </tr>
                  `;
                }
              });
      
              planContent += `</tbody></table>`;
      
              Swal.fire({
                title: `Planes del Cliente: ${nombreCliente}`,
                html: planContent,
                width: "1300px",
                icon: "info",
                confirmButtonText: "Cerrar",
              });
            })
            .catch((error) => {
              Swal.fire({
                title: "Error",
                text: "Hubo un error al cargar el plan de entrenamiento.",
                icon: "error",
                confirmButtonText: "Cerrar",
              });
            });
        }
      });
      </script>
      
      
      

    <script>
      // Obtener elementos del DOM
      const inputSearch = document.getElementById("inputSearch");
      const tableBody = document.getElementById("tableBody");

      // Función para filtrar la tabla
      function filterTable() {
        const filter = inputSearch.value.toUpperCase();
        const rows = tableBody.getElementsByTagName("tr");

        for (let i = 0; i < rows.length; i++) {
          const cells = rows[i].getElementsByTagName("td");
          let found = false;

          for (let j = 0; j < cells.length; j++) {
            if (cells[j].innerText.toUpperCase().indexOf(filter) > -1) {
              found = true;
              break;
            }
          }

          rows[i].style.display = found ? "" : "none";
        }
      }

      // Añadir evento al botón de búsqueda
      document
        .getElementById("searchButton")
        .addEventListener("click", filterTable);

      // Opcional: filtrar en tiempo real mientras se escribe
      inputSearch.addEventListener("keyup", filterTable);
    </script>
  </body>
</html> 