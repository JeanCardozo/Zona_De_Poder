<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Tailwind CSS -->
    <link
      rel="shortcut icon"
      href="https://raw.githubusercontent.com/JeanCardozo/audios/main/z.png"
    />
     <link
     href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.16/tailwind.min.css"
     rel="stylesheet"
   />
   <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
   <link rel="stylesheet" href="../../../src/output.css" />
   <link
     href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
     rel="stylesheet"
   />

    <title>Ver plan de entrenamiento</title>
  </head>
  <body class="bg-fondo"> 
    <% if (userData.rol == "Administrador") { %> <%-
      include('../plantillas/navbar.ejs') %> <% } else if (userData.rol ==
      "Entrenador") { %> <%-
      include('../../entrenador/plantillas/navbarentre.ejs') %> <% } %>

    <div class="px-10 mx-auto mt-4 p-5">
      <div class="flex justify-start gap-2 mb-4">
      <a href="/create_plan_ent" class="btn mt-4 inline-flex items-center border-green-400 bg-green-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-green-700"
      >
        
        <i class="bx bx-plus-circle mr-2"></i> Crear Plan de entrenamiento
      </a>
      <a href="<%= userData.rol == 'Administrador' ? '/index_admin' : '/index_entrenador' %>"
      class="btn mt-4 inline-flex items-center border border-red-400 bg-red-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-red-700"
      >Volver</a>
    </div>
    <div class="max-w-7xl mx-auto p-4">
      <div class="overflow-x-auto">
          <table class="min-w-full table-auto text-xs
           sm:text-sm lg:text-base text-left text-gray-500
      
            dark:text-gray-400">
        <thead class="text-xm bg-gray-500 text-center ">
          <tr class="text-white">
            <th scope="col" class="px-4 py-6">Plan</th>
            <th scope="col" class="px-4 py-6">Identificacion</th>
            <th scope="col" class="px-4 py-6">Nombre</th>
            <th scope="col" class="px-4 py-6">Ver Mas</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
        </tbody>
      </table>
      <div id="pagination" class="w-full flex justify-center"></div>

    </div>

    <script defer>
      const divPagination = document.getElementById('pagination');
      const searchInput = document.getElementById('searchInput');
      let datos = [];
      let filteredData = [];
      const itemsPorPagina = 5;
      let currentPage = 1;
    
      async function getData() {
        try {
          const response = await fetch('/verPlanEnt', {
            method: 'POST',
          });
    
          if (!response.ok) {
            throw new Error(
              "La solicitud no fue exitosa: " + response.statusText
            );
          }
    
          return await response.json();
        } catch (error) {
          console.error('Error al obtener datos:', error);
          return [];
        }
      }
    
      async function inicializar() {
        datos = await getData();
        filteredData = datos;
        actualizarTablaYPaginacion();
      }
    
      function actualizarTablaYPaginacion() {
        const totalPages = Math.ceil(filteredData.length / itemsPorPagina);
        generatePagination(totalPages);
        mostrarPagina(currentPage);
      }
  
      function generatePagination(totalPages) {
        let startPage = Math.max(currentPage - 1, 1);
        let endPage = Math.min(startPage + 2, totalPages);
    
        if (endPage - startPage < 2) {
          startPage = Math.max(endPage - 2, 1);
        }
    
        let paginationHTML = "";
  
        paginationHTML += `
          <button class="mt-4 px-4 py-2 font-bold text-gray-500 bg-white rounded-l hover:bg-gray-100" 
          ${currentPage === 1 ? "disabled" : ""} data-page="${currentPage - 1}">
            Anterior
          </button>
        `;
        
        for (let i = startPage; i <= endPage; i++) {
          paginationHTML += `
            <button class="mt-4 px-4 py-2 font-bold ${
              i === currentPage
                ? "text-blue-500 bg-blue-100"
                : "text-gray-700 bg-white"
            } hover:bg-gray-100 ${
            i === currentPage ? "active" : ""
          }" data-page="${i}">${i}</button>
          `;
        }
  
        paginationHTML += `
          <button class="mt-4 px-4 py-2 font-bold text-gray-500 bg-white rounded-r hover:bg-gray-100" 
          ${currentPage === totalPages ? "disabled" : ""} data-page="${
          currentPage + 1
        }">
            Siguiente
          </button>
        `;
        
        divPagination.innerHTML = paginationHTML;
    
        divPagination.querySelectorAll("button").forEach((button) => {
          button.addEventListener("click", (e) => {
            if (!e.target.disabled) {
              currentPage = parseInt(e.target.dataset.page);
              actualizarTablaYPaginacion();
            }
          });
        });
      }
    
      function mostrarPagina(numeroPagina) {
        const inicio = (numeroPagina - 1) * itemsPorPagina;
        const fin = inicio + itemsPorPagina;
        const datosParaMostrar = filteredData.slice(inicio, fin);
        
        const tbody = document.querySelector('tbody');
        tbody.innerHTML = datosParaMostrar
          .map((dato, index) => `
            <tr class="py-0 text-xm max-w-sm text-center hover:bg-gray-100 ${
              index % 2 === 0 ? "bg-gray-100" : ""
            }">
              <td class="p-2">${dato.planes[0].id}</td>
              <td class="p-2">${dato.id_cliente}</td>
              <td class="p-2">${dato.nombre_cliente}</td>
              <td>
                <a href="#" class="px-2 py-1 bg-blue-500 text-white rounded-md
                  hover:bg-blue-700 ver-mas"
                  data-client-id="${dato.id_cliente}">Ver más</a>
              </td>
            </tr>
          `)
          .join('');
      }
    
      function filtrarResultados() {
        const input = searchInput.value.toLowerCase();
        filteredData = datos.filter(
          (dato) =>
            dato.planes[0].id.toString().includes(input) ||
            dato.id_cliente.toString().includes(input) ||
            dato.nombre_cliente.toLowerCase().includes(input)
        );
        currentPage = 1;
        actualizarTablaYPaginacion();
      }
    
      searchInput.addEventListener("input", filtrarResultados);
    
      inicializar();
  </script>
  
    <script>
      document.body.addEventListener("click", function (event) {
        if (event.target.classList.contains("ver-mas")) {
          const clienteId = event.target.dataset.clientId;
          
          fetch(`/info_plan/${clienteId}`)
            .then((response) => {
              
              if (!response.ok) {
                throw new Error("Error al obtener los datos del plan de entrenamiento");
              }
              return response.json(); // Esta línea debe ser después de verificar `response.ok`
            })
            .then((data) => {
              const nombreCliente = data.nombreCliente;
              const planes = data.planesDeEntrenamiento;

              // Agrupar ejercicios por día
              const ejerciciosPorDia = {};
              planes.forEach(plan => {
                const dia = plan.dia;
                if (!ejerciciosPorDia[dia]) {
                  ejerciciosPorDia[dia] = [];
                }
                ejerciciosPorDia[dia].push({
                  ejercicio: plan.ejercicio,
                  series: plan.series,
                  repeticiones: plan.repeticiones
                });
              });

              // Generar contenido de la tabla
              let planContent = `
                <table class="min-w-full bg-white mb-4">
                  <thead class="bg-gray-800 text-white text-xl">
                    <tr>
                      <th class="py-2 px-4">Día</th>
                      <th class="py-2 px-4">Ejercicio</th>
                      <th class="py-2 px-4">Series</th>
                      <th class="py-2 px-4">Repeticiones</th>
                    </tr>
                  </thead>
                  <tbody class="text-gray-700">
              `;

              for (const [dia, ejercicios] of Object.entries(ejerciciosPorDia)) {
                ejercicios.forEach((ejercicio, index) => {
                  planContent += `
                    <tr class="text-lg">
                      ${index === 0 ? `<td class="py-2 px-4 border" rowspan="${ejercicios.length}" style="vertical-align: middle;">${dia}</td>` : ''}
                      <td class="py-2 px-4 border">${ejercicio.ejercicio}</td>
                      <td class="py-2 px-4 border">${ejercicio.series}</td>
                      <td class="py-2 px-4 border">${ejercicio.repeticiones}</td>
                    </tr>
                  `;
                });
              }

              planContent += `</tbody></table>`;

              Swal.fire({
                title: `Planes del Cliente: ${nombreCliente}`,
                html: planContent,
                width: "1300px",
                icon: "info",
                confirmButtonText: "Cerrar",
              });
            })

            .catch((error) => {
              console.error('Error capturado:', error);
              Swal.fire({
                title: "Error",
                text: "Hubo un error al cargar el plan de entrenamiento.",
                icon: "error",
                confirmButtonText: "Cerrar",
              });
            });
        }
      });
      </script>
      
      
      

    <script>
      // Obtener elementos del DOM
      const inputSearch = document.getElementById("inputSearch");
      const tableBody = document.getElementById("tableBody");

      // Función para filtrar la tabla
      function filterTable() {
        const filter = inputSearch.value.toUpperCase();
        const rows = tableBody.getElementsByTagName("tr");

        for (let i = 0; i < rows.length; i++) {
          const cells = rows[i].getElementsByTagName("td");
          let found = false;

          for (let j = 0; j < cells.length; j++) {
            if (cells[j].innerText.toUpperCase().indexOf(filter) > -1) {
              found = true;
              break;
            }
          }

          rows[i].style.display = found ? "" : "none";
        }
      }

      // Añadir evento al botón de búsqueda
      document
        .getElementById("searchButton")
        .addEventListener("click", filterTable);

      // Opcional: filtrar en tiempo real mientras se escribe
      inputSearch.addEventListener('DOMContentLoaded', "keyup", filterTable);
    </script>
  </body>
</html> 