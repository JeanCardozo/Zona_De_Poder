<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Tailwind CSS -->
    <link
      rel="shortcut icon"
      href="https://raw.githubusercontent.com/JeanCardozo/audios/main/z.png"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.16/tailwind.min.css"
      rel="stylesheet"
    />

    <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.7/locales/es.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="../../../src/output.css" />
    <link
      href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
      rel="stylesheet"
    />

    <title>Crear plan de entrenamiento</title>

    <style>
      html,
      body {
        margin: 0;
        padding: 0;
        font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
        font-size: 14px;
      }

      #external-events {
        position: fixed;
        z-index: 2;
        left: 1250px;
        width: 150px;
        padding: 0 10px;
        border: 1px solid #ccc;
        background: #eee;
      }

      #external-events .fc-event {
        cursor: move;
        margin: 3px 0;
      }

      #calendar-container {
        position: relative;
        z-index: 1;
        margin-left: 250px;
        width: 950px;
      }

      #calendar {
        max-width: 1100px;
        margin: 20px auto;
        background-color: #eee;
      }
      #trash-button {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: #f00;
        border: none;
        padding: 10px;
        cursor: pointer;
      }

      #trash-button i {
        font-size: 24px;
        color: #fff;
      }
      .fc-event {
        transition: transform 0.4s ease-in-out;
      }

      .fc-event-selected {
        transform: scale(1.05); /* Escalar al 110% cuando está seleccionado */
      }
      .btn-confirmar {
        background-color: green;
        color: white;
      }
      .btn-confirmar:hover {
        background-color: #22c55e;
      }

      .btn-cancelar {
        background-color: red;
        color: white;
      }
      .btn-cancelar:hover {
        background-color: #c53222c4;
      }
    </style>
  </head>

  <body class="bg-fondo">
    <%- include('../plantillas/navbar.ejs') %>
    <a
      href="/ver_plan_ent"
      class="inline-flex items-center justify-center py-4 px-6 text-white font-semibold rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 transition-colors duration-200"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M15 19l-7-7 7-7"
        />
      </svg>
    </a>
    <div class="flex flex-col items-center justify-center p-4">
      <!-- Input de ID del cliente -->
      <label class="text-white font-semibold" for="id_cliente"
        >ID del Cliente:</label
      >
      <input
        type="text"
        id="id_cliente"
        class="border border-gray-300 rounded-md px-4 py-2 w-1/3 mt-2 mb-4 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        placeholder="Ingrese el ID del cliente"
      />
    </div>

    <!-- Botón para regresar -->

    <div id="external-events">
      <p><strong>Draggable Events</strong></p>
      <% if (actividades.length > 0) { %> <%
      actividades.forEach(function(actividad) { %>
      <div class="fc-event fc-h-event fc-daygrid-event fc-daygrid-block-event">
        <div class="fc-event-main"><%= actividad.nombre_ejercicio %></div>
      </div>
      <% }); %> <% } else { %>
      <p class="text-center text-gray-600 py-8">
        No hay actividades físicas activas
      </p>
      <% } %>
    </div>

    <div id="calendar-container">
      <div id="calendar"></div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        var Calendar = FullCalendar.Calendar;
        var Draggable = FullCalendar.Draggable;
        var containerEl = document.getElementById("external-events");
        var calendarEl = document.getElementById("calendar");
        var idClienteInput = document.getElementById("id_cliente");

        function initExternalEvents() {
          new Draggable(containerEl, {
            itemSelector: ".fc-event",
            eventData: function (eventEl) {
              return {
                title: eventEl.innerText,
                id: eventEl.dataset.eventId,
              };
            },
          });
        }

        function initCalendar() {
          var calendar = new Calendar(calendarEl, {
            initialView: "dayGridWeek",
            height: 450,
            customButtons: {
              Guardar: {
                text: "Guardar Plan",
                click: function () {
                  savePlanToDatabase(calendar);
                },
              },
            },
            headerToolbar: {
              left: "prev,next",
              center: "title",
              right: "Guardar",
            },
            locale: "es",
            editable: true,
            droppable: true,
            eventDurationEditable: false,
          });
          calendar.render();
          return calendar;
        }

        initExternalEvents();
        var calendar = initCalendar();
        calendar.on("eventClick", function (info) {
          Swal.fire({
            title: "Modificar evento",
            html: `
              <form id="crearEventoform" class="space-y-4">
                <div class="mb-4">
                  <label for="evento" class="block text-xl font-medium text-gray-700">Evento</label>
                  <input type="text" name="evento" id="evento" value="${info.event.title}" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 " readonly/>

                  <label for="series" class="block text-xl font-medium text-gray-700">Series</label>
                  <input type="number" pleaceholder="0" name="series" id="series" value="${info.event.extendedProps.series}" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" />

                  <label for="repeticiones" class="block text-xl font-medium text-gray-700">Repeticiones</label>
                  <input type="number"pleaceholder="0"name="repeticiones" id="repeticiones" value="${info.event.extendedProps.repeticiones}" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" />
                </div>
              </form>
            `,
            showCancelButton: true,
            confirmButtonText: "Guardar cambios",
            cancelButtonText: "Borrar evento",
            showCloseButton: true,
            customClass: {
              confirmButton: "btn-confirmar",
              cancelButton: "btn-cancelar",
            },
            preConfirm: () => {
              const evento = document.getElementById("evento");
              const series = document.getElementById("series");
              const repeticiones = document.getElementById("repeticiones");
              if (!evento.value) {
                Swal.showValidationMessage("Por favor, ingrese un ejercicio");
                return false;
              } else {
                if (!series.value) {
                  Swal.showValidationMessage("Por favor, ingrese las series");
                  return false;
                } else {
                  if (!repeticiones.value) {
                    Swal.showValidationMessage(
                      "Por favor, ingrese las repeticiones"
                    );
                    return false;
                  }
                }
              }
              return {
                title: evento.value,
                series: parseInt(series.value) || 0,
                repeticiones: parseInt(repeticiones.value) || 0,
              };
            },
          }).then((result) => {
            if (result.isConfirmed) {
              info.event.setProp("title", result.value.title);
              info.event.setExtendedProp("series", result.value.series);
              info.event.setExtendedProp(
                "repeticiones",
                result.value.repeticiones
              );
            } else if (result.dismiss === Swal.DismissReason.cancel) {
              info.event.remove(); // Elimina el evento del calendario
              console.log(`Evento borrado: ${info.event.title}`);
            }
          });
        });

        function savePlanToDatabase(calendar) {
          var idCliente = idClienteInput.value.trim();
          if (!idCliente) {
            Swal.fire("Error", "Por favor, ingrese el ID del cliente", "error");
            return;
          }

          var events = calendar.getEvents();

          // Validar que todos los eventos tengan series y repeticiones
          for (let event of events) {
            const series = event.extendedProps.series;
            const repeticiones = event.extendedProps.repeticiones;

            if (!series || series <= 0) {
              Swal.fire(
                "Error",
                `Por favor, ingrese las series para el ejercicio "${event.title}"`,
                "error"
              );
              return;
            }

            if (!repeticiones || repeticiones <= 0) {
              Swal.fire(
                "Error",
                `Por favor, ingrese las repeticiones para el ejercicio "${event.title}"`,
                "error"
              );
              return;
            }
          }

          // Si la validación pasa, continuar con el envío
          var planData = events.map(function (event) {
            return {
              title: event.title || "",
              start: event.start.toISOString() || null,
              series: event.extendedProps.series || 0,
              repeticiones: event.extendedProps.repeticiones || 0,
            };
          });

          fetch("/guardar_plan", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ id_cliente: idCliente, plan: planData }),
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                Swal.fire(
                  "¡Éxito!",
                  "Plan de entrenamiento guardado con éxito",
                  "success"
                ).then(() => {
                  // Redirige a la página "ver_plan_ent"
                  window.location.href = "/ver_plan_ent";
                });
              } else {
                Swal.fire(
                  "Error",
                  "No se pudo guardar el plan de entrenamiento",
                  "error"
                );
              }
            })
            .catch((error) => {
              console.error("Error:", error);
              Swal.fire(
                "Error",
                "Error al guardar el plan de entrenamiento",
                "error"
              );
            });
        }
      });
    </script>
  </body>
</html>
