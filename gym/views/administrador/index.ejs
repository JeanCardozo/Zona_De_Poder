<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Tailwind CSS -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.16/tailwind.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.7/locales/es.js"></script>

      <!-- Incluyendo Font Awesome desde CDN -->
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
   
    
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>
    <link
      href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
      rel="stylesheet"
    />

    <title>DashBoard Admin</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>
  <body class="bg-fondo">
    <%- include('./plantillas/navbar.ejs') %>
    <h1
      class="text-gray-200 text-2xl font-bold mt-10 text-center hover:underline"
    >
      Resumen general de ventas en Zona de poder
    </h1>

    <div class="container mx-auto px-4 py-8">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 max-w-5xl mx-auto">
        <!-- Fila 1 -->
        <div class="flex flex-col justify-center bg-white p-2 rounded-lg shadow text-center text-gray-700 font-bold"id="mensajeErrorVentas">
          <h2 class="text-center mb-16 font-bold">Resumen general de ventas</h2>
          <div class="flex justify-center items-center">
            
            <canvas id="myChart"></canvas>
            
          </div>
        </div>
        
        <div class="flex flex-col justify-center bg-white p-2 rounded-lg shadow text-center text-gray-700 font-bold "id="mensajeErrorIngresos">
         
            <h2 class="text-center mb-2 font-bold">
              Resumen de ingresos diarios
            </h2>
            <div class="flex justify-center items-center ">
              <canvas id="myCharts"></canvas>
            </div>
        </div>
        
        <div class="bg-white p-4 rounded-lg shadow"> 
          <% if (ultimosClientes.length > 0) { %> 
          <h2 class="text-sm font-semibold mb-4 text-gray-800 text-center">
            Movimientos de últimas compras
          </h2>
          <div class="overflow-x-auto">
            <table class="min-w-full table-auto text-xs sm:text-sm lg:text-base text-left text-gray-500 dark:text-gray-400">
              <thead class="bg-gray-400 text-white text-center">
                <tr>
                  <th class="text-left py-4 px-6 uppercase font-semibold text-sm">
                    Nombre
                  </th>
                  <th class="py-4 px-6 uppercase font-semibold text-sm">
                    Plan Actual
                  </th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200 text-center">
                <% ultimosClientes.forEach((roles) => { %>
                  <tr>
                    <td class="text-left py-3 px-4"><%= roles.nombre %></td>
                    <td class="py-3 px-4"><%= roles.tiempo_plan %></td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
        </div>
        <% } else { %>
          <div class="bg-white p-4 rounded-lg shadow">
            <div class="py-10 text-center text-lg font-semibold text-gray-600">
              <!-- Ícono de "X" usando Font Awesome -->
              <i class="fas fa-times-circle text-red-500 text-4xl mb-4"></i>
              <div>No ha ingresado ningún cliente hoy</div>
            </div>
          </div>
        <% } %>
        
      
          <!-- fila 2 -->
          <div class="col-span-3 p-2 rounded-lg shadow max-w-ws overflow-auto bg-white">
            <div id="calendari" class="w-90"></div>
          </div>
          
      
          <!-- fila 3 -->
          
          <div class="col-span-3 bg-white p-4 rounded-lg shadow h-full flex flex-col">
            
            <h2 class="text-sm font-semibold mb-4 text-gray-800 text-center">
              <% if (datosVentasVencidas.length > 0) { %> 
              Resumen de Mensualidades Vencidas
            </h2>
            <form action="" method="post">
              <div class="overflow-x-auto flex-grow">
                <table class="min-w-full table-auto text-xs sm:text-sm text-left text-gray-500 dark:text-gray-400">
                  
                  <thead class="bg-gray-400 text-white text-center sticky top-0">
                    <tr>
                      <th class="text-left py-4 px-6 uppercase font-semibold text-xs">Nombre</th>
                      <th class="py-2 px-4 uppercase font-semibold text-xs">Fecha vencimiento</th>
                      <th class="py-2 px-4 uppercase font-semibold text-xs">Estado</th>
                      <th class="py-2 px-4 uppercase font-semibold text-xs">Renovar</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200 text-center">
                    
                      <% datosVentasVencidas.forEach((mensusven) => { %>
                        <tr>
                          <td class="text-left py-2 px-3"><%= mensusven.nombre %></td>
                          <td class="py-4 px-6">
                            <%= new Date(mensusven.fecha_fin).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' }) %>
                          </td>
                          <td class="py-4 px-6"><%= mensusven.estado %></td>
                          <td class="py-4 px-6">
                            <a href="#" class="bg-green-500 text-white font-bold py-1 px-3 rounded renovar-btn" data-id="<%=mensusven.id%>">Renovar</a>
                          </td>
                        </tr>
                      <% }); %>
                    <% } else { %>
                      <tr>
                        <td colspan="4" class="py-10 text-center text-lg font-semibold text-gray-600">
                          <!-- Ícono de "X" usando Font Awesome -->
                          <i class="fas fa-times-circle text-red-500 text-4xl mb-4"></i>
                          <div>No hay mensualidades vencidas este mes</div>
                        </td>
                      </tr>
                    <% } %>
                  </tbody>
                </table>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
    <script>
      document.querySelectorAll('.renovar-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.preventDefault();
          const idMensualidad = this.getAttribute('data-id');

          console.log("id mensualidad",idMensualidad);
          
          Swal.fire({
            title: 'Renovar mensualidad',
            html: `
              <form id="renovarform" action="/renovar_cliente" method="post" class="space-y-4">
                <input type="hidden" name="id" value="${idMensualidad}" />

                <div class="mb-4">
                  <label for="mensualidad" class="block text-sm font-medium text-gray-700">MENSUALIDADES</label>
                  <select id="mensualidad" name="mensualidad" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                    <option disabled selected>Seleccione una mensualidad</option>
                    <% datosMensualidades.forEach(function(mensual) { %>
                      <option value="<%= mensual.id %>"><%= mensual.total_pagar %> - <%= mensual.tiempo_plan %></option>
                    <% }) %>
                  </select>
                </div>
              </form>
            `,
            showCancelButton: true,
            confirmButtonText: 'Guardar',
            cancelButtonText: 'Cancelar',
            preConfirm: () => {
              const selectMensualidad = document.getElementById('mensualidad');
              if (selectMensualidad.value === "" || selectMensualidad.value === "Seleccione una mensualidad") {
                Swal.showValidationMessage('Por favor seleccione una mensualidad válida');
                return false; // Evitar el envío del formulario
              }
              document.getElementById('renovarform').submit();
            }
          });
        });
      });
    </script>
    

    

    <div id="overlay" class="fixed inset-0 bg-black bg-opacity-50 hidden"></div>

    <div
      id="loginContainer"
      class="fixed inset-0 flex items-center justify-center hidden z-50"
    >
      <form
        id="formularioValidacion"
        class="relative bg-white p-8 rounded-lg shadow-lg max-w-sm w-full"
        action="/registrarIngreso"
        method="POST"
      >
        <!-- Botón de escape -->
        <button
          id="closeButton"
          type="button"
          class="absolute top-2 left-2 text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-full"
        >
          &#x2715;
        </button>

        <label
          for="campoTexto"
          class="block text-lg font-semibold text-gray-700 mb-4"
          style="font-family: 'Montserrat', sans-serif; color: #2c3e50"
        >
          INGRESE CONTRASEÑA DESPUÉS DEL *
        </label>
        <input
          type="text"
          id="campoTexto"
          name="identificacion"
          required
          class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <input type="submit" style="display: none" />
      </form>
    </div>
  
    
    <script>
      // Obtener elementos del DOM
      const inputSearch = document.getElementById("inputSearch");
      const tableBody = document.getElementById("tableBody");

      // Función para filtrar la tabla
      function filterTable() {
        const filter = inputSearch.value.toUpperCase();
        const rows = tableBody.getElementsByTagName("tr");

        for (let i = 0; i < rows.length; i++) {
          const cells = rows[i].getElementsByTagName("td");
          let found = false;

          for (let j = 0; j < cells.length; j++) {
            if (cells[j].innerText.toUpperCase().indexOf(filter) > -1) {
              found = true;
              break;
            }
          }

          rows[i].style.display = found ? "" : "none";
        }
      }

      // Añadir evento al botón de búsqueda
      document
        .getElementById("searchButton")
        .addEventListener("click", filterTable);

      // Opcional: filtrar en tiempo real mientras se escribe
      inputSearch.addEventListener("keyup", filterTable);
    </script>

    </script>

    <script>
                document.addEventListener("DOMContentLoaded", function() {
                    // Obtener los datos del backend, asegurando que no sean undefined
                    const datosVentas = <%- typeof datosVentas !== 'undefined' ? JSON.stringify(datosVentas) : '[]' %>;
                    const datosSumaPorMes = <%- typeof datosSumaPorMes !== 'undefined' ? JSON.stringify(datosSumaPorMes) : '[]' %>;
                    const dataIngresadosHoy = <%- typeof datosIngresosHoy !== 'undefined' ? JSON.stringify(datosIngresosHoy) : '0' %>;

                    // Procesar los datos para el gráfico de ventas
                    const labelsVentas = datosSumaPorMes.map(d => d.mes);
                    const dataVentas = datosSumaPorMes.map(d => d.total);

                    if (datosVentas == 0) {
                        document.getElementById("mensajeErrorVentas").innerHTML = `<tr>
                        <td colspan="4" class="py-10 text-center text-lg font-semibold text-gray-600">
                          
                          <i class="fas fa-times-circle text-red-500 text-4xl mb-4"></i>
                          <div>No hay ventas realizadas este mes</div>
                        </td>
                      </tr>`;
                    } else {
                    // Configuración del primer gráfico para Ventas
                    const ctxVentas = document.getElementById("myChart").getContext("2d");
                    new Chart(ctxVentas, {
                        type: "bar",
                        data: {
                            labels: labelsVentas,
                            datasets: [
                                {
                                    label: "Ventas",
                                    data: dataVentas,
                                    backgroundColor: [
                'rgb(255, 99, 132)',
                'rgb(54, 162, 235)',
                'rgb(255, 205, 86)'
              ],
                                    borderColor: 'rgba(54, 162, 235, 1)', // Color del borde
                                    borderWidth: 1,
                                },
                            ],
                        },
                        plugins: [plugin],
                        options: {

                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                  };

                    // Procesar los datos para el gráfico de ingresos
                    const labelsIngresos = ['Hoy']; // Label único para el día actual
                    const dataIngresos = dataIngresadosHoy; // Total de ingresos del día actual
                    const totalIngresosHoy = dataIngresos.length; 
                    if (dataIngresadosHoy == 0) {
                        document.getElementById("mensajeErrorIngresos").innerHTML = `<tr>
                        <td colspan="4" class="py-10 text-center text-lg font-semibold text-gray-600">
                          
                          <i class="fas fa-times-circle text-red-500 text-4xl mb-4"></i>
                          <div>Todavia no hay ingresos el dia de hoy</div>
                        </td>
                      </tr>`;
                    } else {

                    // Configuración del segundo gráfico para Ingresos
                    const ctxIngresos = document.getElementById("myCharts").getContext("2d");
                    new Chart(ctxIngresos, {
                        type: "doughnut",
                        data: {
                            labels: labelsIngresos,
                            datasets: [
                                {
                                    label: "Ingresos de Hoy",
                                    data: [totalIngresosHoy],
                                    backgroundColor: [
              'rgb(255, 99, 132)',
              'rgb(54, 162, 235)',
              'rgb(255, 205, 86)'
            ],
                                    borderColor: 'rgba(255, 99, 132, 1)', // Color del borde
                                    borderWidth: 1,
                                },
                            ],
                        },
                        plugins: [plugin],
                    });
                }});

                const plugin = {
        id: 'customCanvasBackgroundColor',
        beforeDraw: (chart, args, options) => {
          const {ctx} = chart;
          ctx.save();
          ctx.globalCompositeOperation = 'destination-over';
          ctx.fillStyle = options.color || '#fff';
          ctx.fillRect(0, 0, chart.width, chart.height);
          ctx.restore();
        }
      };
    </script>

    <script>
      document.addEventListener("keydown", function (e) {
        if (e.key === "*") {
          e.preventDefault();
          const campoTexto = document.getElementById("campoTexto");
          campoTexto.value = "*"; // Añadir el '*' automáticamente en el campo de texto

          // Mostrar y enfocar el formulario
          document.getElementById("overlay").classList.remove("hidden");
          document.getElementById("loginContainer").classList.remove("hidden");
          campoTexto.focus(); // Enfocar el campo de texto
        }
      });

      document
        .getElementById("campoTexto")
        .addEventListener("keydown", function (e) {
          if (e.key === "Enter") {
            e.preventDefault(); // Prevenir el comportamiento por defecto de Enter
            const identificacionConAsterisco =
              document.getElementById("campoTexto").value;

            // Validar que el campo no esté vacío después de *
            if (identificacionConAsterisco === "*") {
              alert("Debe ingresar su identificación después del *");
            } else {
              // Enviar la identificación completa como contraseña al backend
              document.getElementById("formularioValidacion").submit();
            }
          }
        });

      // Cerrar el formulario al hacer clic en el botón de escape
      document
        .getElementById("closeButton")
        .addEventListener("click", function () {
          document.getElementById("overlay").classList.add("hidden");
          document.getElementById("loginContainer").classList.add("hidden");
        });
    </script>

    <% if (typeof alert !== "undefined") { %>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Reproducir el sonido antes de mostrar la alerta
        const sonido = "<%= typeof sonido !== 'undefined' ? sonido : '' %>";
        if (sonido) {
          const audio = new Audio(sonido);
          audio.play().catch((error) => {
            console.error("Error al reproducir el sonido:", error);
          });
        }

        // Mostrar la alerta de SweetAlert2
        Swal.fire({
          title: "<%= alertTitle %>",
          text: "<%= alertMessage %>",
          icon: "<%= alertIcon %>",
          showConfirmButton: true, // El usuario debe presionar OK
        }).then(() => {
          // Redirigir después de que el usuario presione OK
          const ruta = "<%= typeof ruta !== 'undefined' ? ruta : '' %>";
          if (ruta) {
            window.location.href = ruta;
          }
        });
      });
    </script>

    <!-- GRAFICOS -->
    <% } %>
    
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        var calendarEl = document.getElementById('calendari');
    
        var calendar = new FullCalendar.Calendar(calendarEl, {
          initialView: 'dayGridMonth', // Vista inicial
          headerToolbar: {
            left: 'prev,next',
            center:'title',
            right: ''
          },
          events: function(fetchInfo, successCallback, failureCallback) {
            fetch('/events')
              .then(response => response.json())
              .then(data => successCallback(data))
              .catch(error => {
                console.error('Error al obtener eventos:', error);
                failureCallback(error);
              });
          },

        });
    
        calendar.render();
      });
    </script>
    
  </body>
</html>
