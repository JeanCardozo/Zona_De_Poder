<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Tailwind CSS -->
    <link
      rel="shortcut icon"
      href="https://raw.githubusercontent.com/JeanCardozo/audios/main/z.png"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.16/tailwind.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="../../../src/output.css" />
    <link
      href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <title>Ver Actividad Fisica</title>

    <style>
      .btn-confirmar {
        background-color: green !important;
        color: white !important;
      }
      .btn-confirmar:hover {
        background-color: #22c55e !important;
      }

      .btn-cancelar {
        background-color: red !important;
        color: white !important;
      }
      .btn-cancelar:hover {
        background-color: #c53222c4 !important;
      }
    </style>
  </head>
  <body class="bg-fondo">
    <%- include('../plantillas/navbar.ejs') %>

    <div class="px-10 mx-auto mt-4 p-5">
      <a
            href="#"
            class="btn mt-4 inline-flex items-center border-green-400 bg-green-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-green-700"
            id="crearActividadBtn">
            
            <i class="bx bx-plus-circle mr-2 br-md"></i>Crear Actividad fisica
            </a
          >
        <a
          href="/index_admin"
          class="btn mt-4 inline-flex items-center border border-red-400 bg-red-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-red-700"
        >
          Volver
        </a>

        

        <div class="max-w-7xl mx-auto p-4">
          <div class="overflow-x-auto">
              <table class="min-w-full table-auto text-xs
               sm:text-sm lg:text-base text-left text-gray-500
                dark:text-gray-400">
          <thead class="bg-gray-500 text-white text-center">
            <tr>
              <th
                scope="col"
                class="px-4 py-6  text-xs font-medium uppercase tracking-wider"
              >
                ID
              </th>
              <th
                scope="col"
                class="px-4py-6 text-xs font-medium uppercase tracking-wider"
              >
                NOMBRE DEL EJERCICIO
              </th>
              <th
                scope="col"
                class="px-4 py-6  text-xs font-medium uppercase tracking-wider"
              >
                GRUPO MUSCULAR
              </th>
              <th
                scope="col"
                class="px-4 py-6  text-xs font-medium uppercase tracking-wider"
              >
                ACCIONES
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200 text-center">
        
          </tbody>
        </table>
      </div>
      <div id="pagination" class="w-full flex justify-center"></div>

    </div>

    <script defer>
      const divPagination = document.getElementById('pagination');
      const searchInput = document.getElementById('searchInput');
      let datos = [];
      let filteredData = [];
      const itemsPorPagina = 5;
      let currentPage = 1;
    
      async function getData() {
        try {
          const response = await fetch('/verActividadFisica', {
            method: 'POST',
          });
    
          if (!response.ok) {
            throw new Error('La solicitud no fue exitosa: ' + response.statusText);
          }
    
          return await response.json();
        } catch (error) {
          console.error('Error al obtener datos:', error);
          return [];
        }
      }
    
      async function inicializar() {
        datos = await getData();
        filteredData = datos;
        actualizarPaginacion();
      }
    
      function actualizarPaginacion() {
        const totalPages = Math.ceil(filteredData.length / itemsPorPagina);
        generatePagination(totalPages);
        mostrarPagina(currentPage);
      }
    
      function generatePagination(totalPages) {
        let startPage = Math.max(currentPage - 1, 1);
        let endPage = Math.min(startPage + 2, totalPages);
    
        if (endPage - startPage < 2) {
          startPage = Math.max(endPage - 2, 1);
        }
    
        let paginationHTML = "";
    
        paginationHTML += `
          <button class="mt-4 px-4 py-2 font-bold text-gray-500 bg-white rounded-l hover:bg-gray-100" 
          ${currentPage === 1 ? "disabled" : ""} data-page="${currentPage - 1}">
            Anterior
          </button>
        `;
    
        for (let i = startPage; i <= endPage; i++) {
          paginationHTML += `
            <button class="mt-4 px-4 py-2 font-bold ${
              i === currentPage ? "text-blue-500 bg-blue-100" : "text-gray-700 bg-white"
            } hover:bg-gray-100 ${
            i === currentPage ? "active" : ""
          }" data-page="${i}">${i}</button>
          `;
        }
    
        paginationHTML += `
          <button class="mt-4 px-4 py-2 font-bold text-gray-500 bg-white rounded-r hover:bg-gray-100" 
          ${currentPage === totalPages ? "disabled" : ""} data-page="${currentPage + 1}">
            Siguiente
          </button>
        `;
    
        divPagination.innerHTML = paginationHTML;
    
        divPagination.querySelectorAll("button").forEach((button) => {
          button.addEventListener("click", (e) => {
            if (!e.target.disabled) {
              currentPage = parseInt(e.target.dataset.page);
              actualizarPaginacion();
            }
          });
        });
      }
    
      function mostrarPagina(numeroPagina) {
        const inicio = (numeroPagina - 1) * itemsPorPagina;
        const fin = inicio + itemsPorPagina;
        const datosParaMostrar = filteredData.slice(inicio, fin);
    
        const tbody = document.querySelector('tbody');
        tbody.innerHTML = datosParaMostrar.map((dato, index) => `
          <tr class="py-0 text-xm max-w-sm text-center hover:bg-gray-100 ${index % 2 === 0 ? 'bg-gray-100' : ''}">
            <td class="p-2">${dato.af_id || ''}</td>
            <td class="p-2">${dato.af_nombre}</td>
            <td class="p-2">${dato.gm_nombre}</td>
            <td class="flex justify-center py-4 whitespace-nowrap text-right text-sm font-medium">
              <a href="#" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded updateActividadBtn" data-id="${dato.af_id || ''}">
                Editar
              </a>
            </td>
          </tr>
        `).join('');
      }
    
      function filtrarResultados() {
        const input = searchInput.value.toLowerCase();
        filteredData = datos.filter(
          (dato) =>
            dato.af_id.toString().toLowerCase().includes(input) ||
            dato.af_nombre.toLowerCase().includes(input) ||
            dato.gm_nombre.toLowerCase().includes(input)
        );
        currentPage = 1;
        actualizarPaginacion();
      }
    
      searchInput.addEventListener("input", filtrarResultados);
    
      inicializar();
    </script>
    
    
<!-- SweetAlert2 -->

    <script>
      // Obtener elementos del DOM
      const inputSearch = document.getElementById("inputSearch");
      const tableBody = document.getElementById("tableBody");

      // Función para filtrar la tabla
      function filterTable() {
        const filter = inputSearch.value.toUpperCase();
        const rows = tableBody.getElementsByTagName("tr");

        for (let i = 0; i < rows.length; i++) {
          const cells = rows[i].getElementsByTagName("td");
          let found = false;

          for (let j = 0; j < cells.length; j++) {
            if (cells[j].innerText.toUpperCase().indexOf(filter) > -1) {
              found = true;
              break;
            }
          }

          rows[i].style.display = found ? "" : "none";
        }
      }

      // Añadir evento al botón de búsqueda
      document
        .getElementById("searchButton")
        .addEventListener("click", filterTable);

      // Opcional: filtrar en tiempo real mientras se escribe
      inputSearch.addEventListener('DOMContentLoaded',"keyup", filterTable);
    </script>


<script>
document
  .getElementById("crearActividadBtn")
  .addEventListener("click", function (e) {
    e.preventDefault();

    // Realizar una solicitud AJAX para obtener los grupos musculares
    fetch('/get_grupos_musculares')
      .then(response => response.json())
      .then(data => {
        let selectOptions = '<option value="" disabled selected>Seleccione un grupo muscular</option>';
        
        data.forEach(function (gm) {
          selectOptions += `<option value="${gm.id}">${gm.nombre}</option>`;
        });

        Swal.fire({
          title: "Crear Actividad física",
          html: `
          <form id="ActividadForm" action="/crear_af" method="post" class="space-y-3">
            <div>
              <label for="gm" class="block text-sm font-medium text-gray-700">Grupos musculares</label>
            <select id="seccion" name="seccion" class="mt-1 block w-full rounded-md
               border border-gray-300 shadow-sm focus:border-indigo-300
                focus:ring focus:ring-indigo-200 focus:ring-opacity-50" required>
                ${selectOptions}
              </select>
            </div>
            <div>
              <label for="nombre_ejercicio" class="block text-sm font-medium text-gray-700">Nombre del ejercicio</label>
              <input type="text" class="mt-1 block w-full rounded-md
               border border-gray-300 shadow-sm focus:border-indigo-300
                focus:ring focus:ring-indigo-200 focus:ring-opacity-50" name="nombre_ejercicio" id="nombre_ejercicio"required>
            </div>
        </form>
          `,
            confirmButtonClass : 'btn-confirmar',
            cancelButtonClass : 'btn-cancelar',
            customClass: {
              confirmButton: 'btn-confirmar',
              cancelButton: 'btn-cancelar'
            },         
          showCancelButton: true,
          confirmButtonText: "Crear",
          cancelButtonText: "Cancelar",
          preConfirm: () => {
        
            const seccionInput = document.getElementById("seccion");
            const ejercicioInput = document.getElementById("nombre_ejercicio");
            
              if (!seccionInput.value) {
                Swal.showValidationMessage(
                  "Por favor, ingrese el grupo muscular"
                );
                return false;
              } else {
                if (!ejercicioInput.value) {
                  Swal.showValidationMessage(
                    "Por favor, ingrese el nombre del ejercicio"
                  );
                  return false;
                } else {
                  document.getElementById("ActividadForm").requestSubmit();
                  const form =
                    Swal.getPopup().querySelector("#ActividadForm");
                  form.requestSubmit();
                
              }
            }
          },
        }).catch((error) =>
          console.error("Error al obtener los convenios:", error)
        );
      });
    });
  </script>
  <script>
    document.querySelector("tbody").addEventListener("click", function (e) {
        if (e.target.classList.contains("updateActividadBtn")) {
          e.preventDefault();
          const ActividadId = e.target.dataset.id;

    fetch(`/actualizar_f/${ActividadId}`)
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log("Datos recibidos:", data);
        if (data.error) {
          Swal.fire("Error", data.error, "error");
        } else {
          Swal.fire({
            title: "Actualizar Actividad física",
            html: `
              <form id="updateActividadForm" action="/update_af" method="post" class="space-y-4 w-full max-w-md mx-auto">
                <input type="hidden" name="id" value="${ActividadId}">
                <div class="mb-2">
                  <label for="gm" class="block text-sm font-medium text-gray-700 mb-1">Grupos musculares</label>
                  <select id="gm" name="gm" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500" required>
                    <option value="" disabled selected>Seleccione un grupo muscular</option>
                    ${data.grupos_musculares.map(gm => `
                      <option value="${gm.id}" ${gm.id === data.actividad_fisica.id_grupo_muscular ? 'selected' : ''}>
                        ${gm.nombre}
                      </option>
                    `).join('')}
                  </select>
                </div>
                <div class="mb-2">
                  <label for="actividad" class="block text-sm font-medium text-gray-700 mb-1">Actividad física</label>
                  <input type="text" id="actividad" name="actividad" value="${data.actividad_fisica.nombre}" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500" required>
                </div>
              </form>
            `,
            confirmButtonClass: "btn-confirmar",
                cancelButtonClass: "btn-cancelar",
                customClass: {
                  confirmButton: "btn-confirmar",
                  cancelButton: "btn-cancelar",
                },           
            showCancelButton: true,
            confirmButtonText: "monda",
            cancelButtonText: "Cancelar",
            preConfirm: () => {
        
        const seccionInput = document.getElementById("gm");
        const ejercicioInput = document.getElementById("actividad");
        
          if (!seccionInput.value) {
            Swal.showValidationMessage(
              "Por favor, ingrese el grupo muscular"
            );
            return false;
          } else {
            if (!ejercicioInput.value) {
              Swal.showValidationMessage(
                "Por favor, ingrese el nombre del ejercicio"
              );
              return false;
            } else {
              document.getElementById("updateActividadForm").requestSubmit();
              const form =
                Swal.getPopup().querySelector("#updateActividadForm");
              form.requestSubmit();
            
            }
          }
        },
      }).catch((error) =>
        console.error("Error al obtener las actvidades fisicas:", error)
      );
    }});
  }});
</script>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    const inputSearch = document.getElementById("searchInput");
    const tableBody = document.querySelector("tbody");

    // Función para filtrar la tabla
    function filterTable() {
      const filter = inputSearch.value.toUpperCase();
      const rows = tableBody.getElementsByTagName("tr");

      for (let i = 0; i < rows.length; i++) {
        const cells = rows[i].getElementsByTagName("td");
        let found = false;

        for (let j = 0; j < cells.length; j++) {
          if (cells[j].innerText.toUpperCase().indexOf(filter) > -1) {
            found = true;
            break;
          }
        }

        rows[i].style.display = found ? "" : "none";
      }
    }

    // Añadir evento al input de búsqueda
    inputSearch.addEventListener('DOMContentLoaded',"keyup", filterTable);

    // Inicializar tabla
    async function inicializar() {
      datos = await getData();
      console.log(datos);

      const totalPages = Math.ceil(datos.length / itemsPorPagina);
      generatePagination(totalPages);
      mostrarPagina(1);
    }

    // Función para mostrar página
    function mostrarPagina(numeroPagina) {
      const inicio = (numeroPagina - 1) * itemsPorPagina;
      const fin = inicio + itemsPorPagina;
      const datosParaMostrar = datos.slice(inicio, fin);

      const tbody = document.querySelector('tbody');
      tbody.innerHTML = datosParaMostrar.map((dato, index) => `
        <tr class="py-0 text-xm max-w-sm text-center hover:bg-gray-100 ${index % 2 === 0 ? 'bg-gray-100' : ''}">
          <td class="p-2">${dato.af_id || ''}</td>
          <td class="p-2">${dato.af_nombre}</td>
          <td class="p-2">${dato.gm_nombre}</td>
          <td class="flex justify-center py-4 whitespace-nowrap text-right text-sm font-medium">
            <a href="#" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded updateActividadBtn" data-id="${dato.af_id || ''}">
              Editar
            </a>
          </td>
        </tr>
      `).join('');
      
      filterTable(); // Aplicar filtro inicial
    }

    inicializar();
  });
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Verificar si hay un mensaje de alerta en la respuesta
    `<% if (typeof alertMessage !== 'undefined' && alertMessage) { %>`;
    Swal.fire({
      title: "Éxito",
      text: "<%= alertMessage.text %>",
      icon: "<%= alertMessage.type %>",
      showConfirmButton: <%= alertMessage.showConfirmButton %>,
      timer: <%= alertMessage.timer %>,
      
    }).then(() => {
      // Remover el parámetro de la URL después de mostrar la alerta
      const url = new URL(window.location);
      url.searchParams.delete("message");
      window.history.replaceState({}, "", url);
    });
    `<% } %>`;
  });
</script>

  </body>
</html>
